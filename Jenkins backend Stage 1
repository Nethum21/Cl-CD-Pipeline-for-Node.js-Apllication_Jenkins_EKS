pipeline {
    agent any
    
    tools {
        nodejs 'node21'
    }
    
    environment {
        SCANNER_HOME = tool 'sonar'
    }

    stages {
        stage('Git Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/Lachitha/JWT-AUTH-APP.git'
            }
        }
        stage('Install Dependencies') {
            steps {
                dir('backend') {
                    sh "npm install"
                }
            }
        }
        stage('Unit Test') {
            steps {
                dir('backend') {
                    sh "npm test"
                }
            }
        }
        stage('Trivy FS Scan') {
            steps {
                dir('backend') {
                    sh "trivy fs --format table -o fs-report.html ."
                }
            }
        }
        stage('SonarQube') {
            steps {
                withSonarQubeEnv('sonar') {
                    dir('backend') {
                        sh '$SCANNER_HOME/bin/sonar-scanner -Dsonar.projectKey=Authenbackend -Dsonar.projectName=Authenbackend'
                    }
                }
            }
        }
        stage('Docker Build & Tag') {
            steps {
                dir('backend') {
                    script {
                        withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                            sh "docker build -t lachisenarath576259/backendauthentication:latest ."
                        }
                    }
                }
            }
        }
        stage('Trivy Image Scan') {
            steps {
                sh "trivy image --format table -o image-report.html lachisenarath576259/backendauthentication:latest"
            }
        }
        stage('Docker Push Image') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                        sh "docker push lachisenarath576259/backendauthentication:latest"
                    }
                }
            }
        }
        stage('Stop and Remove Existing Container') {
            steps {
                script {
                    sh '''
                        EXISTING_CONTAINER_ID=$(docker ps -q -f "publish=85")
                        
                        if [ ! -z "$EXISTING_CONTAINER_ID" ]; then
                            docker stop $EXISTING_CONTAINER_ID
                            docker rm $EXISTING_CONTAINER_ID
                        fi
                    '''
                }
            }
        }
        stage('Deploy to dev') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker') {
                        sh "docker run -d -p 85:85 lachisenarath576259/backendauthentication:latest"
                    }
                }
            }
        }
    }
}
